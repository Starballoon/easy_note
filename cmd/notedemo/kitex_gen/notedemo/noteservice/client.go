// Code generated by Kitex v0.3.1. DO NOT EDIT.

package noteservice

import (
	"context"
	"easy_note/cmd/notedemo/kitex_gen/notedemo"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateNote(ctx context.Context, Req *notedemo.CreateNoteResponse, callOptions ...callopt.Option) (r *notedemo.CreateNoteRequest, err error)
	MGetNote(ctx context.Context, Req *notedemo.MGetNoteResponse, callOptions ...callopt.Option) (r *notedemo.MGetNoteRequest, err error)
	DeleteNote(ctx context.Context, Req *notedemo.DeleteNoteResponse, callOptions ...callopt.Option) (r *notedemo.DeleteNoteRequest, err error)
	QueryNote(ctx context.Context, Req *notedemo.QueryNoteResponse, callOptions ...callopt.Option) (r *notedemo.QueryNoteRequest, err error)
	UpdateNote(ctx context.Context, Req *notedemo.UpdateNoteResponse, callOptions ...callopt.Option) (r *notedemo.UpdateNoteRequest, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kNoteServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kNoteServiceClient struct {
	*kClient
}

func (p *kNoteServiceClient) CreateNote(ctx context.Context, Req *notedemo.CreateNoteResponse, callOptions ...callopt.Option) (r *notedemo.CreateNoteRequest, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateNote(ctx, Req)
}

func (p *kNoteServiceClient) MGetNote(ctx context.Context, Req *notedemo.MGetNoteResponse, callOptions ...callopt.Option) (r *notedemo.MGetNoteRequest, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MGetNote(ctx, Req)
}

func (p *kNoteServiceClient) DeleteNote(ctx context.Context, Req *notedemo.DeleteNoteResponse, callOptions ...callopt.Option) (r *notedemo.DeleteNoteRequest, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteNote(ctx, Req)
}

func (p *kNoteServiceClient) QueryNote(ctx context.Context, Req *notedemo.QueryNoteResponse, callOptions ...callopt.Option) (r *notedemo.QueryNoteRequest, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryNote(ctx, Req)
}

func (p *kNoteServiceClient) UpdateNote(ctx context.Context, Req *notedemo.UpdateNoteResponse, callOptions ...callopt.Option) (r *notedemo.UpdateNoteRequest, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateNote(ctx, Req)
}
