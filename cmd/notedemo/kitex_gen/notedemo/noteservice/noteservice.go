// Code generated by Kitex v0.3.1. DO NOT EDIT.

package noteservice

import (
	"context"
	"easy_note/cmd/notedemo/kitex_gen/notedemo"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return noteServiceServiceInfo
}

var noteServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "NoteService"
	handlerType := (*notedemo.NoteService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateNote": kitex.NewMethodInfo(createNoteHandler, newCreateNoteArgs, newCreateNoteResult, false),
		"MGetNote":   kitex.NewMethodInfo(mGetNoteHandler, newMGetNoteArgs, newMGetNoteResult, false),
		"DeleteNote": kitex.NewMethodInfo(deleteNoteHandler, newDeleteNoteArgs, newDeleteNoteResult, false),
		"QueryNote":  kitex.NewMethodInfo(queryNoteHandler, newQueryNoteArgs, newQueryNoteResult, false),
		"UpdateNote": kitex.NewMethodInfo(updateNoteHandler, newUpdateNoteArgs, newUpdateNoteResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "note",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func createNoteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(notedemo.CreateNoteResponse)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(notedemo.NoteService).CreateNote(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateNoteArgs:
		success, err := handler.(notedemo.NoteService).CreateNote(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateNoteResult)
		realResult.Success = success
	}
	return nil
}
func newCreateNoteArgs() interface{} {
	return &CreateNoteArgs{}
}

func newCreateNoteResult() interface{} {
	return &CreateNoteResult{}
}

type CreateNoteArgs struct {
	Req *notedemo.CreateNoteResponse
}

func (p *CreateNoteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CreateNoteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CreateNoteArgs) Unmarshal(in []byte) error {
	msg := new(notedemo.CreateNoteResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateNoteArgs_Req_DEFAULT *notedemo.CreateNoteResponse

func (p *CreateNoteArgs) GetReq() *notedemo.CreateNoteResponse {
	if !p.IsSetReq() {
		return CreateNoteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateNoteArgs) IsSetReq() bool {
	return p.Req != nil
}

type CreateNoteResult struct {
	Success *notedemo.CreateNoteRequest
}

var CreateNoteResult_Success_DEFAULT *notedemo.CreateNoteRequest

func (p *CreateNoteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CreateNoteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CreateNoteResult) Unmarshal(in []byte) error {
	msg := new(notedemo.CreateNoteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateNoteResult) GetSuccess() *notedemo.CreateNoteRequest {
	if !p.IsSetSuccess() {
		return CreateNoteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateNoteResult) SetSuccess(x interface{}) {
	p.Success = x.(*notedemo.CreateNoteRequest)
}

func (p *CreateNoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func mGetNoteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(notedemo.MGetNoteResponse)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(notedemo.NoteService).MGetNote(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *MGetNoteArgs:
		success, err := handler.(notedemo.NoteService).MGetNote(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MGetNoteResult)
		realResult.Success = success
	}
	return nil
}
func newMGetNoteArgs() interface{} {
	return &MGetNoteArgs{}
}

func newMGetNoteResult() interface{} {
	return &MGetNoteResult{}
}

type MGetNoteArgs struct {
	Req *notedemo.MGetNoteResponse
}

func (p *MGetNoteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in MGetNoteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *MGetNoteArgs) Unmarshal(in []byte) error {
	msg := new(notedemo.MGetNoteResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MGetNoteArgs_Req_DEFAULT *notedemo.MGetNoteResponse

func (p *MGetNoteArgs) GetReq() *notedemo.MGetNoteResponse {
	if !p.IsSetReq() {
		return MGetNoteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MGetNoteArgs) IsSetReq() bool {
	return p.Req != nil
}

type MGetNoteResult struct {
	Success *notedemo.MGetNoteRequest
}

var MGetNoteResult_Success_DEFAULT *notedemo.MGetNoteRequest

func (p *MGetNoteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in MGetNoteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *MGetNoteResult) Unmarshal(in []byte) error {
	msg := new(notedemo.MGetNoteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MGetNoteResult) GetSuccess() *notedemo.MGetNoteRequest {
	if !p.IsSetSuccess() {
		return MGetNoteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MGetNoteResult) SetSuccess(x interface{}) {
	p.Success = x.(*notedemo.MGetNoteRequest)
}

func (p *MGetNoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func deleteNoteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(notedemo.DeleteNoteResponse)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(notedemo.NoteService).DeleteNote(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteNoteArgs:
		success, err := handler.(notedemo.NoteService).DeleteNote(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteNoteResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteNoteArgs() interface{} {
	return &DeleteNoteArgs{}
}

func newDeleteNoteResult() interface{} {
	return &DeleteNoteResult{}
}

type DeleteNoteArgs struct {
	Req *notedemo.DeleteNoteResponse
}

func (p *DeleteNoteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DeleteNoteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteNoteArgs) Unmarshal(in []byte) error {
	msg := new(notedemo.DeleteNoteResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteNoteArgs_Req_DEFAULT *notedemo.DeleteNoteResponse

func (p *DeleteNoteArgs) GetReq() *notedemo.DeleteNoteResponse {
	if !p.IsSetReq() {
		return DeleteNoteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteNoteArgs) IsSetReq() bool {
	return p.Req != nil
}

type DeleteNoteResult struct {
	Success *notedemo.DeleteNoteRequest
}

var DeleteNoteResult_Success_DEFAULT *notedemo.DeleteNoteRequest

func (p *DeleteNoteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DeleteNoteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteNoteResult) Unmarshal(in []byte) error {
	msg := new(notedemo.DeleteNoteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteNoteResult) GetSuccess() *notedemo.DeleteNoteRequest {
	if !p.IsSetSuccess() {
		return DeleteNoteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteNoteResult) SetSuccess(x interface{}) {
	p.Success = x.(*notedemo.DeleteNoteRequest)
}

func (p *DeleteNoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func queryNoteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(notedemo.QueryNoteResponse)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(notedemo.NoteService).QueryNote(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *QueryNoteArgs:
		success, err := handler.(notedemo.NoteService).QueryNote(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*QueryNoteResult)
		realResult.Success = success
	}
	return nil
}
func newQueryNoteArgs() interface{} {
	return &QueryNoteArgs{}
}

func newQueryNoteResult() interface{} {
	return &QueryNoteResult{}
}

type QueryNoteArgs struct {
	Req *notedemo.QueryNoteResponse
}

func (p *QueryNoteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in QueryNoteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *QueryNoteArgs) Unmarshal(in []byte) error {
	msg := new(notedemo.QueryNoteResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var QueryNoteArgs_Req_DEFAULT *notedemo.QueryNoteResponse

func (p *QueryNoteArgs) GetReq() *notedemo.QueryNoteResponse {
	if !p.IsSetReq() {
		return QueryNoteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *QueryNoteArgs) IsSetReq() bool {
	return p.Req != nil
}

type QueryNoteResult struct {
	Success *notedemo.QueryNoteRequest
}

var QueryNoteResult_Success_DEFAULT *notedemo.QueryNoteRequest

func (p *QueryNoteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in QueryNoteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *QueryNoteResult) Unmarshal(in []byte) error {
	msg := new(notedemo.QueryNoteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *QueryNoteResult) GetSuccess() *notedemo.QueryNoteRequest {
	if !p.IsSetSuccess() {
		return QueryNoteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *QueryNoteResult) SetSuccess(x interface{}) {
	p.Success = x.(*notedemo.QueryNoteRequest)
}

func (p *QueryNoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func updateNoteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(notedemo.UpdateNoteResponse)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(notedemo.NoteService).UpdateNote(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateNoteArgs:
		success, err := handler.(notedemo.NoteService).UpdateNote(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateNoteResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateNoteArgs() interface{} {
	return &UpdateNoteArgs{}
}

func newUpdateNoteResult() interface{} {
	return &UpdateNoteResult{}
}

type UpdateNoteArgs struct {
	Req *notedemo.UpdateNoteResponse
}

func (p *UpdateNoteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UpdateNoteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateNoteArgs) Unmarshal(in []byte) error {
	msg := new(notedemo.UpdateNoteResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateNoteArgs_Req_DEFAULT *notedemo.UpdateNoteResponse

func (p *UpdateNoteArgs) GetReq() *notedemo.UpdateNoteResponse {
	if !p.IsSetReq() {
		return UpdateNoteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateNoteArgs) IsSetReq() bool {
	return p.Req != nil
}

type UpdateNoteResult struct {
	Success *notedemo.UpdateNoteRequest
}

var UpdateNoteResult_Success_DEFAULT *notedemo.UpdateNoteRequest

func (p *UpdateNoteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UpdateNoteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateNoteResult) Unmarshal(in []byte) error {
	msg := new(notedemo.UpdateNoteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateNoteResult) GetSuccess() *notedemo.UpdateNoteRequest {
	if !p.IsSetSuccess() {
		return UpdateNoteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateNoteResult) SetSuccess(x interface{}) {
	p.Success = x.(*notedemo.UpdateNoteRequest)
}

func (p *UpdateNoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateNote(ctx context.Context, Req *notedemo.CreateNoteResponse) (r *notedemo.CreateNoteRequest, err error) {
	var _args CreateNoteArgs
	_args.Req = Req
	var _result CreateNoteResult
	if err = p.c.Call(ctx, "CreateNote", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetNote(ctx context.Context, Req *notedemo.MGetNoteResponse) (r *notedemo.MGetNoteRequest, err error) {
	var _args MGetNoteArgs
	_args.Req = Req
	var _result MGetNoteResult
	if err = p.c.Call(ctx, "MGetNote", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteNote(ctx context.Context, Req *notedemo.DeleteNoteResponse) (r *notedemo.DeleteNoteRequest, err error) {
	var _args DeleteNoteArgs
	_args.Req = Req
	var _result DeleteNoteResult
	if err = p.c.Call(ctx, "DeleteNote", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryNote(ctx context.Context, Req *notedemo.QueryNoteResponse) (r *notedemo.QueryNoteRequest, err error) {
	var _args QueryNoteArgs
	_args.Req = Req
	var _result QueryNoteResult
	if err = p.c.Call(ctx, "QueryNote", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateNote(ctx context.Context, Req *notedemo.UpdateNoteResponse) (r *notedemo.UpdateNoteRequest, err error) {
	var _args UpdateNoteArgs
	_args.Req = Req
	var _result UpdateNoteResult
	if err = p.c.Call(ctx, "UpdateNote", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
